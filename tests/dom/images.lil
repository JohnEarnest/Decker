#######################################
#
#  Image Interface Integration Suite
#
#######################################

on matrix_show i do
	cw:1+9<max max i
	f:"%%%ii" format cw
	b:"+%s+" format (cw*count first i) take "-"
	print[b]
	print[("\n","|%s|","",f) format i]
	print[b]
end
on image_format i do
	i:image_matrix[i]
	cw:1+9<max max i
	f:"%%%ii" format cw
	print["(%s)" format (",\n ","(list %s)",",",f) format i]
end
on image_matrix i do
	r:if "image"~typeof i i.pixels else () end
	if 0~count r list r else r end
end
on assert_file text want got do
	s:shell["cmp -s %s %s" format want,got] # exit code { 0:matched, 1:differed, 2:error }
	if s.exit
		print["test failed: %s" text]
		print["binary file '%s' does not match '%s'" format got,want]
		exit[1]
	end
	shell["rm %s" format got]
end
on assert_base text want got disp do
	#print["%s..." text]
	if !want~got
		print["test failed: %s" text]
		print["expected:"] disp[want]
		print["got:"]      disp[got]
		exit[1]
	end
end
on assert text want got do
	assert_base[text want got show]
end
on assert_image text want got do
	assert_base[text want image_matrix[got] matrix_show]
end

#######################################
#
#  Tests
#
#######################################

assert["new image from nothing" "image" (typeof image[])]
assert_image["new image with size"
	((list 0,0,0),
	 (list 0,0,0),
	 (list 0,0,0),
	 (list 0,0,0))
	image[3,4]
]

assert["image with decimal size" (2,3) image[2.5,3.7].size]

smol:image[3,4]
smol[1,1]:2
smol[2,3]:6
assert_image["write to image"
	((list 0,0,0),
	 (list 0,2,0),
	 (list 0,0,0),
	 (list 0,0,6))
	smol
]

assert["read from image at decimal position" 37 image[1,1].map[0 dict 37][.5,.4]]
t:image[1,1]
t[.5,.4]:49
assert["write to image at decimal position" 49 t[0,0]]

smol.size:5,6
assert_image["resize image larger"
	((list 0,0,0,0,0),
	 (list 0,2,0,0,0),
	 (list 0,0,0,0,0),
	 (list 0,0,6,0,0),
	 (list 0,0,0,0,0),
	 (list 0,0,0,0,0))
	smol
]

smol.size:2,2
assert_image["resize image smaller"
	((list 0,0),
	 (list 0,2))
	smol
]

img:image[4,3]
img[0,1]:1
img[0,2]:2
img[1,2]:3
img[2,0]:4
img.map[1,0,0,0,3]
assert_image["image map"
	((list 1,1,3,1),
	 (list 0,1,1,1),
	 (list 0,0,1,1))
	img
]
img.map[5000 dict 23] # bogus input indices, no fill
assert_image["image dict map"
	((list 6,6,5,6),
	 (list 0,6,6,6),
	 (list 0,0,6,6))
	img.copy[].map[(3,1) dict 5,6]
]
assert_image["image dict map and fill"
	((list 8,8,9,8),
	 (list 9,8,8,8),
	 (list 9,9,8,8))
	img.copy[].map[1 dict 8 9]
]

i:image[3,3]
i[1,1]:1
i.map[0,2+range 256]
assert["image map oversized list" ("%j" parse "[[0,0,0],[0,2,0],[0,0,0]]") i.pixels]
i:image[3,3]
i[1,1]:1
i.map[((200+range 300)dict 0),((range 257) dict 0,2+range 256)]
assert["image map oversized dict" ("%j" parse "[[0,0,0],[0,2,0],[0,0,0]]") i.pixels]

img.transform["horiz"]
assert_image["image mirror horiz"
	((list 1,3,1,1),
	 (list 1,1,1,0),
	 (list 1,1,0,0))
	img
]
img.transform["vert"]
assert_image["image mirror vert"
	((list 1,1,0,0),
	 (list 1,1,1,0),
	 (list 1,3,1,1))
	img
]
img.transform["flip"]
assert_image["image transpose"
	((list 1,1,1),
	 (list 1,1,3),
	 (list 0,1,1),
	 (list 0,0,1))
	img
]
img.transform["left"]
assert_image["image rotate left"
	((list 1,3,1,1),
	 (list 1,1,1,0),
	 (list 1,1,0,0))
	img
]
img.transform["right"]
assert_image["image rotate right"
	((list 1,1,1),
	 (list 1,1,3),
	 (list 0,1,1),
	 (list 0,0,1))
	img
]

assert["image encode" "%%IMG2AAMABAEFAwEAAQECAAIBAQ==" img.encoded]
assert_image["image decode"
	((list 1,1,1),
	 (list 1,1,3),
	 (list 0,1,1),
	 (list 0,0,1))
	image["%%IMG2AAMABAEFAwEAAQECAAIBAQ=="]
]

assert_image["image copy"
	((list 1,1,0),
	 (list 1,3,0))
	img.copy[1,0 3,2]
]
dst:image[5,6]
ret:dst.paste[img 2,1]
assert_image["image paste"
	((list 0,0,0,0,0),
	 (list 0,0,1,1,1),
	 (list 0,0,1,1,3),
	 (list 0,0,0,1,1),
	 (list 0,0,0,0,1),
	 (list 0,0,0,0,0))
	dst
]
assert["image paste returns self" dst ret]
dst.paste[img 3,1,-3,4]
assert_image["image paste, negative scale (no effect)"
	((list 0,0,0,0,0),
	 (list 0,0,1,1,1),
	 (list 0,0,1,1,3),
	 (list 0,0,0,1,1),
	 (list 0,0,0,0,1),
	 (list 0,0,0,0,0))
	dst
]
self:image[2,6]
self[0,0]:11
self[0,1]:22
self[1,0]:44
self[1,1]:33
self.paste[self 0,2]
assert_image["image paste onto itself"
	((list 11,44),
	 (list 22,33),
	 (list 11,44),
	 (list 22,33),
	 (list  0, 0),
	 (list  0, 0))
	self
]
assert["image histogram" ((0,11,22,33,44) dict (4,2,2,2,2)) self.hist]

assert["image bounds zero"      ("%J" parse "{'pos':[0,0],'size':[0,0]}") image[0,0]                 .bounds]
assert["image bounds 1x1 empty" ("%J" parse "{'pos':[1,1],'size':[0,0]}") image[1,1]                 .bounds]
assert["image bounds 1x1 solid" ("%J" parse "{'pos':[0,0],'size':[1,1]}") image[1,1].map[0 dict 1]   .bounds]
assert["image bounds edges"     ("%J" parse "{'pos':[0,0],'size':[5,4]}") image["%%IMG0AAUABJiACMg="].bounds]
assert["image bounds inset"     ("%J" parse "{'pos':[2,1],'size':[2,3]}") image["%%IMG0AAYABQAgMDAA"].bounds]

mi:image["%%IMG0AA4ADQAAA8AH4B/gP/A/8D/4P/gf+B/4D/AH4AAA"].merge[image["%%IMG1AAIAAyYkJCYmJA=="] image["%%IMG0AAYABviIqLiA/A=="]]
assert["image merge" "%%IMG1AA4ADSYkJiQmJCYkJiQmJCYkJCYkJiQmAQAAACQmJCYmJCYkJgABAAEAASQmJCYkJgEBAAEAAQEBJCYkJCYAAAAAAQAAAAAAJCYmJAEBAQEBAQEBAQEmJCYkAQEBAAEBAQEBAAEkJCYAAAEAAQAAAAEAASYmJCYAAQABAAEAAQABJCYkJgEBAAEAAQEBAAEkJCYkJgAAAQAAAAAAJCYmJCYkJgEBAQEBASQmJCYkJiQmJCYkJiQmJCYk" mi.encoded]

horiz:image["%%IMG2AAgACAAIAQgCCAMIBAgFCAYIBwg="]
vert :image["%%IMG1AAgACAABAgMEBQYHAAECAwQFBgcAAQIDBAUGBwABAgMEBQYHAAECAwQFBgcAAQIDBAUGBwABAgMEBQYHAAECAwQFBgc="]
assert["image + merge" "%%IMG1AAgACAABAgMEBQYHAQIDBAUGBwgCAwQFBgcICQMEBQYHCAkKBAUGBwgJCgsFBgcICQoLDAYHCAkKCwwNBwgJCgsMDQ4=" horiz.copy[].merge["+" vert].encoded]
assert["image - merge" "%%IMG1AAgACAD//v38+/r5AQD//v38+/oCAQD//v38+wMCAQD//v38BAMCAQD//v0FBAMCAQD//gYFBAMCAQD/BwYFBAMCAQA=" horiz.copy[].merge["-" vert].encoded]
assert["image * merge" "%%IMG1AAgACAAAAAAAAAAAAAECAwQFBgcAAgQGCAoMDgADBgkMDxIVAAQIDBAUGBwABQoPFBkeIwAGDBIYHiQqAAcOFRwjKjE=" horiz.copy[].merge["*" vert].encoded]
assert["image & merge" "%%IMG1AAgACAAAAAAAAAAAAAEBAQEBAQEAAQICAgICAgABAgMDAwMDAAECAwQEBAQAAQIDBAUFBQABAgMEBQYGAAECAwQFBgc=" horiz.copy[].merge["&" vert].encoded]
assert["image | merge" "%%IMG1AAgACAABAgMEBQYHAQECAwQFBgcCAgIDBAUGBwMDAwMEBQYHBAQEBAQFBgcFBQUFBQUGBwYGBgYGBgYHBwcHBwcHBwc=" horiz.copy[].merge["|" vert].encoded]
assert["image = merge" "%%IMG0AAgACIBAIBAIBAIB"                                                                             horiz.copy[].merge["=" vert].encoded]
assert["image > merge" "%%IMG0AAgACACAwODw+Pz+"                                                                             horiz.copy[].merge[">" vert].encoded]
assert["image < merge" "%%IMG0AAgACH8/Hw8HAwEA"                                                                             horiz.copy[].merge["<" vert].encoded]
assert["image op merge with empty image" horiz.encoded horiz.copy[].merge["+" image[0,0]].encoded]

a:image[8,1] a.pixels:1,2,3,4,5,6,7,8
b:image[8,1] b.pixels:254,253,128,127,126,125
a.merge["|" b]
assert["image merge limits" (list(254,253,128,127,126,125,7,8)) a.pixels]

a:image[2,1] a[0,0]:100 a[1,0]:1
b:image[2,1] b[0,0]:200 b[1,0]:5
assert["image merge overflow"  (list  44,  6) image_matrix[a.copy[].merge["+" b]]]
assert["image merge underflow" (list 156,252) image_matrix[a.copy[].merge["-" b]]]

assert["image outline zero"   "%%IMG2AAAAAA=="                                 image[0,0                 ].outline[34].encoded]
assert["image outline one"    "%%IMG0AAEAAYA="                                 image["%%IMG0AAEAAYA="    ].outline[34].encoded]
assert["image outline empty"  "%%IMG0AAMAAwAAAA=="                             image["%%IMG0AAMAAwAAAA=="].outline[ 1].encoded]
assert["image outline ident"  "%%IMG0AAMAA0DgQA=="                             image["%%IMG0AAMAA0DgQA=="].outline[  ].encoded]
assert["image outline corner" "%%IMG1AAMAAyMBIwEBASMBIw=="                     image["%%IMG0AAMAA0DgQA=="].outline[35].encoded]
assert["image outline full"   "%%IMG1AAUABQAAJAAAACQBJAAkAQEBJAAkASQAAAAkAAA=" image["%%IMG0AAUABQAgcCAA"].outline[36].encoded]
assert["image outline iter"   "%%IMG1AAYABiYlJSYAACUBASUmACUBJQElJiUBAQEBJSYlJQEBJQAmJiUlJg==" image["%%IMG0AAYABgBgUHgYAA=="].outline[37].outline[38].encoded]

if !sys.platform~"awk"
	assert_image["read nonexistent gif"
		list ()
		read["tests/dom/fake.gif"]
	]
	assert_image["read malformed/invalid gif"
		list ()
		read["tests/dom/a.png"]
	]
	assert_image["read gif with transparency"
		((list 0,0,0,0,0,0,0,0),
		 (list 0,0,1,1,1,1,0,0),
		 (list 0,1,0,0,0,1,1,0),
		 (list 0,0,1,1,1,1,1,0),
		 (list 0,1,1,0,0,1,1,0),
		 (list 0,1,1,0,0,1,1,0),
		 (list 0,1,1,0,0,1,1,0),
		 (list 0,0,1,1,1,1,1,0),
		 (list 0,0,0,0,0,0,0,0))
		read["tests/dom/a.gif"]
	]
	assert_image["read gif with opaque background"
		((list 32,32,32,32,32,32,32,32),
		 (list 32,32, 1, 1, 1, 1,32,32),
		 (list 32, 1,32,32,32, 1, 1,32),
		 (list 32,32, 1, 1, 1, 1, 1,32),
		 (list 32, 1, 1,32,32, 1, 1,32),
		 (list 32, 1, 1,32,32, 1, 1,32),
		 (list 32, 1, 1,32,32, 1, 1,32),
		 (list 32,32, 1, 1, 1, 1, 1,32),
		 (list 32,32,32,32,32,32,32,32))
		read["tests/dom/a-opaque.gif"]
	]

	assert["read invalid gif frames" (("frames","delays") dict (list ()),(list())) read["bogus.gif" "frames"]]

	ae:"%%IMG0AAgACwA8Rj5mZmY+AAAA"
	be:"%%IMG0AAgACwBgYHxmZmZmZnwA"
	each s in ("opt","blessed")
		f:read[("tests/dom/ab-%s.gif" format s) "frames"]
		assert[("read animated %s.gif delays" format s) (3,3)   f.delays]
		assert[("read animated %s.gif frames" format s) (ae,be) f.frames..encoded]
	end

	con:("%%IMG2ACYAJgARAQQAIQEGAB8BAiEEAQIAHQECIQYBAgAbAQIhCAECABkBAiEKAQIAFwECIQwBAgAVAQIhBQEEIQUBAgATAQIhBQEGIQUBAgARAQIhBgEGIQYBAgAPAQIhBwEGIQcBAgANAQIhCAEGIQgBAgALAQIhAgEHIQEBBCEKAQIACQECIQMBASEDAQQhDwECAAcBAiEFAQEhAQEGIQ8BAgAFAQIhBgEGIQEBASEQAQIAAwECIQcBBSECAQEhEQECAAEBAiEHAQYhAgEBIRIBBCEHAQUhAQEBIQEBASESAQQhBwEFIQIBAiESAQQhBwEGIQIBASESAQIAAQECIQYBByECAQEhEAECAAMBAiEFAQMhAQEEIQIBASEOAQIABQECIQQBAyECAQMhAwEBIQwBAgAHAQIhAwEDIQIBAyEEAQMhCAECAAkBAiECAQMhAgEDIQQBBCEGAQIACwECIQEBAyECAQIhBAEGIQQBAgANAQIhAQECIQIBAyECAQghAgECAA8BAiEBAQEhAgEDIQIBCCEBAQIAEQECIRABAgATAQIhDgECABUBAiEMAQIAFwECIQoBAgAZAQIhCAECABsBAiEGAQIAHQECIQQBAgAfAQYAIQEEABE=","%%IMG2ACYAJgARAQQAIQEGAB8BAiEEAQIAHQECIQYBAgAbAQIhCAECABkBAiEKAQIAFwECIQwBAgAVAQIhBQEEIQUBAgATAQIhBQEGIQUBAgARAQIhBgEGIQYBAgAPAQIhBwEGIQcBAgANAQIhCAEGIQgBAgALAQIhAQEIIQEBBCEKAQIACQECIQIBASEEAQQhDwECAAcBAiEEAQEhAgEGIQ8BAgAFAQIhBgEGIQEBASEQAQIAAwECIQcBBSECAQEhEQECAAEBAiEHAQUhAQEBIQEBASESAQQhBwEFIQIBAiESAQQhBwEFIQQBASERAQQhBwEGIQQBASEQAQIAAQECIQYBByEEAQEhDgECAAMBAiEFAQMhAQEEIQQBBCEJAQIABQECIQQBAyECAQMhBAEFIQcBAgAHAQIhAwEDIQIBAyEEAQUhBgECAAkBAiECAQMhAgEDIQQBBSEFAQIACwECIQEBAyECAQIhBAEGIQQBAgANAQIhAQECIQIBAyECAQghAgECAA8BAiEBAQEhAgEDIQIBCCEBAQIAEQECIRABAgATAQIhDgECABUBAiEMAQIAFwECIQoBAgAZAQIhCAECABsBAiEGAQIAHQECIQQBAgAfAQYAIQEEABE=","%%IMG2ACYAJgARAQQAIQEGAB8BAiEEAQIAHQECIQYBAgAbAQIhCAECABkBAiEKAQIAFwECIQwBAgAVAQIhBQEEIQUBAgATAQIhBQEGIQUBAgARAQIhBgEGIQYBAgAPAQIhBwEGIQcBAgANAQIhCAEGIQgBAgALAQIhAQEIIQEBBCEKAQIACQECIQIBASEEAQQhDwECAAcBAiEDAQEhAwEGIQ8BAgAFAQIhBAEBIQEBBiEBAQEhEAECAAMBAiEFAQchAgEBIREBAgABAQIhBwEFIQMBASESAQQhBwEHIQEBASEFAQIhCwEEIQcBBSECAQMhAwEEIQoBBCEHAQYhBAEIIQkBAgABAQIhBgEHIQUBBiEIAQIAAwECIQUBAyEBAQQhBAEGIQcBAgAFAQIhBAEDIQIBAyEHAQMhBgECAAcBAiEDAQMhAgEDIQUBAiEIAQIACQECIQIBAyECAQMhBAEEIQYBAgALAQIhAQEDIQIBAiEEAQYhBAECAA0BAiEBAQIhAgEDIQIBCCECAQIADwECIQEBASECAQMhAgEIIQEBAgARAQIhEAECABMBAiEOAQIAFQECIQwBAgAXAQIhCgECABkBAiEIAQIAGwECIQYBAgAdAQIhBAECAB8BBgAhAQQAEQ==","%%IMG2ACYAJgARAQQAIQEGAB8BAiEEAQIAHQECIQYBAgAbAQIhCAECABkBAiEKAQIAFwECIQwBAgAVAQIhBQEEIQUBAgATAQIhBQEGIQUBAgARAQIhBgEGIQYBAgAPAQIhBwEGIQQBAiEBAQIADQECIQgBBiECAQEhAQECIQIBAgALAQIhAQEIIQEBBCEKAQIACQECIQIBASEEAQQhCAEBIQYBAgAHAQIhAwEBIQMBBiEHAQEhAQEBIQUBAgAFAQIhBAEBIQEBBiEBAQEhBQEBIQMBASEGAQIAAwECIQUBASEBAQUhAgEBIQUBASEBAQEhCQECAAEBAiEGAQYhAwEBIRIBBCEGARUhBwEEIQcBBSEDAQEhBQEFIQgBBCEHAQYhCAEEIQkBAgABAQIhBgEHIRMBAgADAQIhBQEDIQEBBCERAQIABQECIQQBAyECAQMhEAECAAcBAiEDAQMhAgEDIQUBAiEIAQIACQECIQIBAyECAQMhBAEEIQYBAgALAQIhAQEDIQIBAiEEAQYhBAECAA0BAiEBAQIhAgEDIQIBCCECAQIADwECIQEBASECAQMhAgEIIQEBAgARAQIhEAECABMBAiEOAQIAFQECIQwBAgAXAQIhCgECABkBAiEIAQIAGwECIQYBAgAdAQIhBAECAB8BBgAhAQQAEQ==")
	assert["read color animated gif" con (read["tests/dom/construction.gif" "frames"].frames..encoded)]

	if !sys.platform~"web"
		frame_a:read["tests/dom/a.gif"]
		write["temp.gif" frame_a]
		assert_file["round-trip transparent gif" "tests/dom/a-blessed.gif" "temp.gif"]

		frame_b:read["tests/dom/b.gif"]
		write["temp.gif" (frame_a,frame_b)]
		assert_file["write animated gif with different frame sizes" "tests/dom/ab-blessed.gif" "temp.gif"]

		parts:()
		parts.frames:frame_a,frame_b,frame_a
		parts.delays:7,5,0
		write["temp.gif" parts]
		f:read["temp.gif" "frames"]
		assert["round-trip animated gif frame delays" (7,5,1) f.delays]

		parts.delays:9
		write["temp.gif" parts]
		f:read["temp.gif" "frames"]
		assert["spread gif frame delay" (9,9,9) f.delays]

		parts.frames:9
		assert["don't write gif if given bogus frames." 0 write["temp.gif" parts]]
		parts.frames:frame_a
		assert["spread gif frame" 1 write["temp.gif" parts]]

		frame_a.size:0,0
		assert["cannot write out a gif of dimension 0 on either axis." 0 write["temp.gif" frame_a]]
		shell["rm temp.gif"]
	end
end

rot:"%%IMG2ACgAIgD/AFsBAQAlAQQAIgEGACABBwAeAQoAHgEKAB8BCQAgAQcAIAEIAB8BCQAeAQQAAQEEAB4BBAADAQMAHQEEAAUBAQAdAQQAJAEDACYBAQD/AKo="
assert["rotate image negative"
	"%%IMG2ACgAIgD/APEBAwAkAQQABwEBABsBBQACAQEAAQEFABkBBgABAQgAGQEMAAEBAgAYAQsAHAEKAB0BDAAdAQsAIAEIAP8A8w=="
	image[rot].rotate[pi*-.8].encoded
]
assert["rotate image positive"
	"%%IMG2ACgAIgD/AJ0BAgAlAQcAIgEJAB8BCwAeAQsAHQEKAB8BCAAgAQcAIgEHACEBAwABAQQAIAECAAMBBAAlAQQAJQEEACUBBAAlAQIA/wB3"
	image[rot].rotate[pi*3.5].encoded
]
assert["rotate image empty" image[0,0].encoded image[0,0].rotate[pi].encoded]

grayscale:image["%%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"]
assert["dither grayscale"
	"%%IMG0ACgANAAAAAAAAAAAAABAAAAACRAAAAAghAAAABIhAAAAQkgAABAJEEAAISSEEQAISKMEANIaIGAiMIJMiQaEpJIESZEkkmI2YRlkmY0kwkmRM+QmEkTf4yWyZn/42ImSf9SDZJD/1m02Te/zJJFg//GTmRJ/fNpm2dv6TaSb//szOTd//bbPd3/+2SA/+/4JJL///OcUv//9kUR///wUbV//+aez///++wR///gIaH//+ycJf/f62UQ///SbMh/v9SYIz//J7c0j//7/IAF5AksYEQGzbwgRAp13AJGizNUAJ//yHSJLR/OA3spy3ID3NtrSdgA///vdAAAAjP9kACIyAlMQKWbZ"
	grayscale.copy[].transform["dither"].encoded
]

a:"%%IMG0AAsACQAACAAIABQAEgA/ACCAccAAAA=="
assert["translate image clamped" "%%IMG0AAsACQAAAAACAAIABQAEgA/ACCAcYA==" image[a].translate[2,1   ].encoded]
assert["translate image floored" "%%IMG0AAsACQAAAAACAAIABQAEgA/ACCAcYA==" image[a].translate[2.3,1.2].encoded]
assert["translate image wrapped" "%%IMG0AAsACfggBCCOYAAAAABAAEAAoACQAA==" image[a].translate[-3,4 1].encoded]

b:"%%IMG0AAcACAA4fGx8bGwA"
assert["scale image up uniform"    "%%IMG0AA4AEAAAAAAPwA/AP/A/8DzwPPA/8D/wPPA88DzwPPAAAAAA"                         image[b].scale[ 2  ].encoded]
assert["scale image up nonuniform" "%%IMG0AA4AGAAAAAAAAA/AD8APwD/wP/A/8DzwPPA88D/wP/A/8DzwPPA88DzwPPA88AAAAAAAAA==" image[b].scale[ 2,3].encoded]
assert["scale image down"          "%%IMG0AAQACAAgcFBwUFAA"                                                         image[b].scale[.7,1].encoded]
assert["scale image negative"      "%%IMG2AAAAAA=="                                                                 image[b].scale[-3,4].encoded]
assert["scale image none"          "%%IMG2AAAAAA=="                                                                 image[b].scale[    ].encoded]
assert["scale 0x0 image"           "%%IMG2AAAAAA==" image[0,0].scale[2,3].encoded]

assert["scale image exact"
	"%%IMG0AAwAbj/AP8DAMMAw//D/8MAwwDD/8P/wwDDAMP/w//DAMMAw//D/8MAwwDD/8P/wwDDAMP/w//DAMMAw//D/8MAwwDD/8P/wwDDAMP/w//DAMMAw//D/8MAwwDD/8P/wwDDAMP/w//DAMMAw//D/8MAwwDD/8P/wwDDAMP/w//DAMMAw//D/8MAwwDD/8P/wwDDAMP/w//DAMMAw//D/8MAwwDD/8P/wwDDAMP/w//DAMMAw//D/8MAwwDD/8P/wwDDAMP/w//DAMMAw//D/8MAwwDD/8P/wwDDAMD/AP8A="
	image["%%IMG0AAYAN3iE/IT8hPyE/IT8hPyE/IT8hPyE/IT8hPyE/IT8hPyE/IT8hPyE/IT8hPyE/IT8hPyE/IT8hHg="].scale[2].encoded
]

assert["scale image down absolute" "%%IMG0AAcABgA4fHxsbA=="                 image[b].scale[ 7, 6 1].encoded]
assert["scale image up absolute"   "%%IMG0AAoACgAAAAAfAD+AO4A/gD+AO4A7gAAA" image[b].scale[10,10 1].encoded]

i:image[4,3]
i.pixels:range 16
assert_image["image write flat pixels"
	((list 0, 1, 2, 3),
	 (list 4, 5, 6, 7),
	 (list 8, 9,10,11))
	i
]
i.pixels:(list 10,11,12,13),(list 14,15,16,17)
assert_image["image write pixel matrix"
	((list 10,11,12,13),
	 (list 14,15,16,17),
	 (list  8, 9,10,11))
	i
]

#######################################
#
#  Wrap Up
#
#######################################

if 0~assert
	print["internal error; environment corruption!"]
else
	print["all image tests passed."]
end
